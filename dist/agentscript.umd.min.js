(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory(exports):typeof define==="function"&&define.amd?define(["exports"],factory):factory(global.AS={})})(this,function(exports){"use strict";const util={typeOf:obj=>({}).toString.call(obj).match(/\s(\w+)/)[1].toLowerCase(),isType:(obj,string)=>util.typeOf(obj)===string,isString:obj=>util.isType(obj,"string"),isObject:obj=>util.isType(obj,"object"),isArray:obj=>util.isType(obj,"array"),isNumber:obj=>util.isType(obj,"number"),isInteger:obj=>Number.isInteger(obj),isImage:obj=>util.isType(obj,"image"),isImageBitmap:obj=>util.isType(obj,"imagebitmap"),isPrimitive:obj=>obj==null||"object"!=typeof obj,isOneOfTypes:(obj,array)=>array.includes(util.typeOf(obj)),isImageable:obj=>util.isOneOfTypes(obj,["image","htmlimageelement","htmlcanvaselement","offscreencanvas","imagebitmap"]),isUintArray:obj=>/^uint.*array$/.test(util.typeOf(obj)),isIntArray:obj=>/^int.*array$/.test(util.typeOf(obj)),isFloatArray:obj=>/^float.*array$/.test(util.typeOf(obj)),isTypedArray:obj=>util.typeOf(obj.buffer)==="arraybuffer",typeName:obj=>obj.constructor.name,isLittleEndian(){const d32=new Uint32Array([16909060]);return new Uint8ClampedArray(d32.buffer)[0]===4},inNode:()=>typeof window==="undefined"&&typeof global!=="undefined",inBrowser:()=>!util.inNode(),globalObject:()=>util.inNode()?global:window,identity:o=>o,noop:()=>{},propFcn:prop=>o=>o[prop],convertArray(array,Type){const Type0=array.constructor;if(Type0===Type)return array;return Type.from(array)},arrayToBuffer(array,ArrayType=Float64Array){if(array.constructor===Array)array=new ArrayType(array);return new Uint8Array(array.buffer)},bufferToArray(uint8array,Type,ArrayType=Float64Array){if(Type===Array)Type=ArrayType;return Type===Array?Array.from(new ArrayType(uint8array.buffer)):new Type(uint8array.buffer)},bufferToBase64(uint8Array){const binstr=Array.prototype.map.call(uint8Array,ch=>String.fromCharCode(ch)).join("");return btoa(binstr)},base64ToBuffer(base64){const binstr=atob(base64);const uint8Array=new Uint8Array(binstr.length);Array.prototype.forEach.call(binstr,(ch,i)=>{uint8Array[i]=ch.charCodeAt(0)});return uint8Array},randomSeedSin(seed=Math.PI/4){return()=>{const x=Math.sin(seed++)*1e4;return x-Math.floor(x)}},randomSeedParkMiller(seed=123456){seed=seed%2147483647;return()=>{seed=seed*16807%2147483647;return(seed-1)/2147483646}},randomSeed(seed,useParkMiller=true){Math.random=useParkMiller?this.randomSeedParkMiller(seed):this.randomSeedSin(seed)},logOnce(msg){if(!this.logOnceMsgSet)this.logOnceMsgSet=new Set;if(!this.logOnceMsgSet.has(msg)){console.log(msg);this.logOnceMsgSet.add(msg)}},warn(msg){this.logOnce("Warning: "+msg)},print(msg,element=null){if(this.isObject(msg))msg=JSON.stringify(msg);if(!element&&this.inBrowser())element=document.body;if(element){element.style.fontFamily="monospace";element.innerHTML+=msg+"<br />"}else{console.log(msg)}},timeit(f,runs=1e5,name="test"){console.time(name);for(let i=0;i<runs;i++)f(i);console.timeEnd(name)},fps(){const start=performance.now();let steps=0;return function step(){steps++;const ms=performance.now()-start;const fps=parseFloat((steps/(ms/1e3)).toFixed(2));Object.assign(step,{fps:fps,ms:ms,start:start,steps:steps})}},pps(obj,title=""){if(title)console.log(title);let count=1;let str="";while(obj){if(typeof obj==="function"){str=obj.constructor.toString()}else{const okeys=Object.keys(obj);str=okeys.length>0?`[${okeys.join(", ")}]`:`[${obj.constructor.name}]`}console.log(`[${count++}]: ${str}`);obj=Object.getPrototypeOf(obj)}},arraysToString:arrays=>arrays.map(a=>`[${a}]`).join(","),toWindow(obj){Object.assign(this.globalObject(),obj);console.log("toWindow:",Object.keys(obj).join(", "))},objectToString(obj){return JSON.stringify(obj,null,"  ").replace(/ {2}"/g,"  ").replace(/": /g,": ")},objectToString1(obj){return JSON.stringify(obj).replace(/{"/g,"{").replace(/,"/g,",").replace(/":/g,":")},parseQueryString(paramsString=window.location.search.substr(1)){const results={};const searchParams=new URLSearchParams(paramsString);for(var pair of searchParams.entries()){let[key,val]=pair;if(val.match(/^[0-9.]+$/))val=Number(val);if(["true","t",""].includes(val))val=true;if(["false","f"].includes(val))val=false;results[key]=val}return results},setScript(path,props={}){const scriptTag=document.createElement("script");scriptTag.src=path;Object.assign(scriptTag,props);document.querySelector("head").appendChild(scriptTag)},fcnToWorker(fcn){const href=document.location.href;const root=href.replace(/\/[^\/]+$/,"/");const fcnStr=`(${fcn.toString(root)})("${root}")`;const objUrl=URL.createObjectURL(new Blob([fcnStr],{type:"text/javascript"}));const worker=new Worker(objUrl);worker.onerror=function(e){console.log("ERROR: Line ",e.lineno,": ",e.message)};return worker},workerScript(script,worker){const srcBlob=new Blob([script],{type:"text/javascript"});const srcURL=URL.createObjectURL(srcBlob);worker.postMessage({cmd:"script",url:srcURL})},getEventXY(element,evt){const rect=element.getBoundingClientRect();return[evt.clientX-rect.left,evt.clientY-rect.top]},randomInt:max=>Math.floor(Math.random()*max),randomInt2:(min,max)=>min+Math.floor(Math.random()*(max-min)),randomFloat:max=>Math.random()*max,randomFloat2:(min,max)=>min+Math.random()*(max-min),randomCentered:r=>util.randomFloat2(-r/2,r/2),randomNormal(mean=0,sigma=1){const[u1,u2]=[1-Math.random(),Math.random()];const norm=Math.sqrt(-2*Math.log(u1))*Math.cos(2*Math.PI*u2);return norm*sigma+mean},isPowerOf2:num=>(num&num-1)===0,nextPowerOf2:num=>Math.pow(2,Math.ceil(Math.log2(num))),mod:(v,n)=>(v%n+n)%n,wrap:(v,min,max)=>min+util.mod(v-min,max-min),clamp(v,min,max){if(v<min)return min;if(v>max)return max;return v},between:(val,min,max)=>min<=val&&val<=max,lerp:(lo,hi,scale)=>lo<=hi?lo+(hi-lo)*scale:lo-(lo-hi)*scale,lerpScale:(number,lo,hi)=>(number-lo)/(hi-lo),radians:degrees=>degrees*Math.PI/180,degrees:radians=>radians*180/Math.PI,heading(radians){const degrees=this.degrees(radians);return this.mod(90-degrees,360)},angle(heading){const degrees=this.mod(360-heading,360);return this.radians(degrees)},subtractRadians(rad1,rad0){let dr=this.mod(rad1-rad0,2*Math.PI);if(dr>Math.PI)dr=dr-2*Math.PI;return dr},subtractHeadings(deg1,deg0){let dAngle=this.mod(deg1-deg0,360);if(dAngle>180)dAngle=dAngle-360;return dAngle},radiansToward:(x,y,x1,y1)=>Math.atan2(y1-y,x1-x),headingToward(x,y,x1,y1){return this.heading(this.radiansToward(x,y,x1,y1))},distance:(x,y,x1,y1)=>Math.sqrt(util.sqDistance(x,y,x1,y1)),sqDistance:(x,y,x1,y1)=>(x-x1)*(x-x1)+(y-y1)*(y-y1),inCone(x,y,radius,coneAngle,direction,x0,y0){if(this.sqDistance(x0,y0,x,y)>radius*radius)return false;const angle12=this.radiansToward(x0,y0,x,y);return coneAngle/2>=Math.abs(this.subtractRadians(direction,angle12))},nestedProperty(obj,path){if(typeof path==="string")path=path.split(".");switch(path.length){case 1:return obj[path[0]];case 2:return obj[path[0]][path[1]];case 3:return obj[path[0]][path[1]][path[2]];case 4:return obj[path[0]][path[1]][path[2]][path[3]];default:return path.reduce((obj,param)=>obj[param],obj)}},repeat(n,f,a=[]){for(let i=0;i<n;i++)f(i,a);return a},step(n,step,f){for(let i=0;i<n;i+=step)f(i)},range(length){return this.repeat(length,(i,a)=>{a[i]=i})},arrayMax:array=>array.reduce((a,b)=>Math.max(a,b)),arrayMin:array=>array.reduce((a,b)=>Math.min(a,b)),arraySum:array=>array.reduce((a,b)=>a+b),arraysEqual(a1,a2){if(a1.length!==a2.length)return false;for(let i=0;i<a1.length;i++){if(a1[i]!==a2[i])return false}return true},removeArrayItem(array,item){const ix=array.indexOf(item);if(ix!==-1)array.splice(ix,1);else this.warn(`removeArrayItem: ${item} not in array`);return array},forEach(arrayOrObj,fcn){if(arrayOrObj.slice){for(let i=0,len=arrayOrObj.length;i<len;i++){fcn(arrayOrObj[i],i,arrayOrObj)}}else{Object.keys(arrayOrObj).forEach(k=>fcn(arrayOrObj[k],k,arrayOrObj))}return arrayOrObj},clone(array){return array.slice(0)},concatArrays(array1,array2){const Type=array1.constructor;if(Type===Array){return array1.concat(this.convertArray(array2,Array))}const array=new Type(array1.length+array2.length);array.set(array1);array.set(array2,array1.length);return array},objectsEqual:(a,b)=>JSON.stringify(a)===JSON.stringify(b),histogram(array,bin=1,min=Math.floor(this.arrayMin(array))){const hist=[];let[minBin,maxBin]=[Number.MAX_VALUE,Number.MIN_VALUE];let[minVal,maxVal]=[Number.MAX_VALUE,Number.MIN_VALUE];for(const a of array){const i=Math.floor(a/bin)-min;hist[i]=hist[i]===undefined?1:hist[i]+1;minBin=Math.min(minBin,i);maxBin=Math.max(maxBin,i);minVal=Math.min(minVal,a);maxVal=Math.max(maxVal,a)}for(const i in hist){if(hist[i]===undefined){hist[i]=0}}const bins=maxBin-minBin+1;return{bins:bins,minBin:minBin,maxBin:maxBin,minVal:minVal,maxVal:maxVal,hist:hist}},oneOf:array=>array[util.randomInt(array.length)],otherOneOf(array,item){if(array.length<2)throw Error("util.otherOneOf: array.length < 2");do{var other=this.oneOf(array)}while(item===other);return other},oneKeyOf:obj=>util.oneOf(Object.keys(obj)),oneValOf:obj=>obj[util.oneKeyOf(obj)],sortNums(array,ascending=true){return array.sort((a,b)=>ascending?a-b:b-a)},sortObjs(array,fcn,ascending=true){if(typeof fcn==="string")fcn=this.propFcn(fcn);const comp=(a,b)=>fcn(a)-fcn(b);return array.sort((a,b)=>ascending?comp(a,b):-comp(a,b))},shuffle(array){for(let i=array.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));const temp=array[i];array[i]=array[j];array[j]=temp}return array},uniq(array,f=this.identity){if(this.isString(f))f=this.propFcn(f);return array.filter((ai,i,a)=>i===0||f(ai)!==f(a[i-1]))},uniqUnsorted:array=>Array.from(new Set(array)),aRamp(start,stop,numItems){if(numItems<=1)throw Error("aRamp: numItems must be > 1");const a=[];for(let i=0;i<numItems;i++){a.push(start+(stop-start)*(i/(numItems-1)))}return a},aIntRamp(start,stop,numItems=Math.abs(stop-start)+1){return this.aRamp(start,stop,numItems).map(a=>Math.round(a))},normalize(array,lo=0,hi=1){const[min,max]=[this.arrayMin(array),this.arrayMax(array)];const scale=1/(max-min);return array.map(n=>this.lerp(lo,hi,scale*(n-min)))},normalize8(array){return new Uint8ClampedArray(this.normalize(array,-.5,255.5))},normalizeInt(array,lo,hi){return this.normalize(array,lo,hi).map(n=>Math.round(n))},imagePromise(url){return new Promise((resolve,reject)=>{const img=new Image;img.crossOrigin="Anonymous";img.onload=(()=>resolve(img));img.onerror=(()=>reject(Error(`Could not load image ${url}`)));img.src=url})},canvasBlobPromise(can,mimeType="image/png",quality=.95){return new Promise((resolve,reject)=>{can.toBlob(blob=>resolve(blob),mimeType,quality)})},xhrPromise(url,type="text",method="GET"){return new Promise((resolve,reject)=>{const xhr=new XMLHttpRequest;xhr.open(method,url);xhr.responseType=type;xhr.onload=(()=>resolve(xhr.response));xhr.onerror=(()=>reject(Error(`Could not load ${url}: ${xhr.status}`)));xhr.send()})},timeoutPromise(ms=1e3){return new Promise(resolve=>{setTimeout(resolve,ms)})},async timeoutLoop(fcn,steps=-1,ms=0){let i=0;while(i++!==steps){fcn(i);await this.timeoutPromise(ms)}},yieldLoop(fcn,steps=-1){let i=0;function*gen(){while(i++!==steps){yield fcn(i)}}const iterator=gen();while(!iterator.next().done){}},rafPromise(){return new Promise(resolve=>requestAnimationFrame(resolve))},async rafLoop(fcn,steps=-1){let i=0;while(i++!==steps){fcn(i);await this.rafPromise()}},waitPromise(done,ms=10){return new Promise(resolve=>{function waitOn(){if(done())return resolve();else setTimeout(waitOn,ms)}waitOn()})},createCanvas(width,height,offscreen=true){if(offscreen)return new OffscreenCanvas(width,height);return document.createElement("canvas")},createCtx(width,height,offscreen=true){const can=this.createCanvas(width,height,offscreen);return can.getContext("2d")},cloneCtx(ctx0){const ctx=this.createCtx(ctx0.canvas.width,ctx0.canvas.height);ctx.drawImage(ctx0.canvas,0,0);return ctx},resizeCtx(ctx,width,height){const copy=this.cloneCtx(ctx);ctx.canvas.width=width;ctx.canvas.height=height;ctx.drawImage(copy.canvas,0,0)},setCtxSize(ctx,width,height){const can=ctx.canvas;if(can.width!==width||can.height!=height){can.width=width;can.height=height}},setIdentity(ctx){ctx.save();ctx.setTransform(1,0,0,1,0,0)},setTextParams(ctx,font,textAlign="center",textBaseline="middle"){Object.assign(ctx,{font:font,textAlign:textAlign,textBaseline:textBaseline})},ctxImageData(ctx){return ctx.getImageData(0,0,ctx.canvas.width,ctx.canvas.height)},fillCtx(ctx,cssColor){util.setIdentity(ctx);ctx.fillStyle=cssColor;ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height);ctx.restore()},fillCtxWithImage(ctx,img){this.setIdentity(ctx);ctx.drawImage(img,0,0,ctx.canvas.width,ctx.canvas.height);ctx.restore()},setCtxImage(ctx,img){this.setCtxSize(ctx,img.width,img.height);ctx.drawImage(img,0,0,img.width,img.height)},imageToBytesCtx:null,imageToBytes(img,flipY=false,imgFormat="RGBA"){if(!this.imageToBytesCtx){const can=this.createCanvas(0,0);this.imageToBytesCtx=can.getContext("webgl",{premultipliedAlpha:false})}const{width:width,height:height}=img;const gl=this.imageToBytesCtx;Object.assign(gl.canvas,{width:width,height:height});const fmt=gl[imgFormat];const texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);if(flipY){gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,true)}gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,gl.NONE);gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,false);gl.texImage2D(gl.TEXTURE_2D,0,fmt,fmt,gl.UNSIGNED_BYTE,img);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);const framebuffer=gl.createFramebuffer();gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);const status=gl.checkFramebufferStatus(gl.FRAMEBUFFER);if(status!==gl.FRAMEBUFFER_COMPLETE){throw Error(`imageToBytes: status not FRAMEBUFFER_COMPLETE: ${status}`)}const pixSize=imgFormat==="RGB"?3:4;const pixels=new Uint8Array(pixSize*width*height);gl.readPixels(0,0,width,height,fmt,gl.UNSIGNED_BYTE,pixels);gl.bindFramebuffer(gl.FRAMEBUFFER,null);return pixels}};class AgentArray extends Array{static fromArray(array){Object.setPrototypeOf(array,AgentArray.prototype);return array}toArray(){Object.setPrototypeOf(this,Array.prototype);return this}isEmpty(){return this.length===0}first(){return this[0]}last(){return this[this.length-1]}props(key,type=AgentArray){const result=new type(this.length);for(let i=0;i<this.length;i++){result[i]=this[i][key]}return result}propsObject(obj){const result={};util.forEach(obj,(val,key)=>{result[key]=this.props(key,val)});return result}propsArrays(keys,indexed=true){const result=indexed?{}:new AgentArray(this.length);if(util.isString(keys))keys=keys.split(" ");for(let i=0;i<this.length;i++){const vals=[];const agent=this[i];for(let j=0;j<keys.length;j++){vals.push(agent[keys[j]])}result[indexed?agent.id:i]=vals}return result}propsObjects(keys,indexed=true){const result=indexed?{}:new AgentArray(this.length);if(util.isString(keys))keys=keys.split(/,*  */);for(let i=0;i<this.length;i++){const vals={};const agent=this[i];for(let j=0;j<keys.length;j++){let key=keys[j],val;if(key.includes(":")){[key,val]=key.split(":");val=util.getNestedObject(agent,val)}else{if(key.includes(".")){throw Error("propsObjects: dot notation requires name:val: "+key)}val=agent[key]}if(util.typeOf(val)==="function")val=agent[val.name]();if(util.isArray(val)){if(util.isInteger(val[0].id)){if(val.ID){throw Error("propsObjects: value cannot be an AgentSet: "+key)}val=val.map(v=>v.id)}else{val=util.clone(val)}}else if(util.isObject(val)){if(util.isInteger(val.id)){val=val.id}else{val=Object.assign({},obj);util.forEach(val,(v,key)=>{if(util.isInteger(v.id)){v[key]=v.id}})}}vals[key]=val}result[indexed?agent.id:i]=vals}return result}values(fcn){const result=new AgentArray(this.length);for(let i=0;i<this.length;i++){result[i]=fcn(this[i])}return result}uniq(f=util.identity){if(util.isString(f))f=(o=>o[f]);return this.filter((ai,i,a)=>i===0||f(ai)!==f(a[i-1]))}each(fcn){for(let i=0,len=this.length;i<len;i++){fcn(this[i],i,this)}}ask(fcn){const length=this.length;for(let i=0;i<Math.min(length,this.length);i++){fcn(this[i],i,this);if(length!=this.length){const name=this.name||this.constructor.name;const direction=this.length<length?"decreasing":"increasing";util.warn(`AgentArray.ask array mutation: ${name}: ${direction}`)}}}count(reporter){return this.reduce((prev,o)=>prev+(reporter(o)?1:0),0)}sum(key){return this.reduce((prev,o)=>prev+(key?o[key]:o),0)}avg(key){return this.sum(key)/this.length}min(key){return this.reduce((prev,o)=>Math.min(prev,key?o[key]:o),Infinity)}max(key){return this.reduce((prev,o)=>Math.max(prev,key?o[key]:o),-Infinity)}histogram(key,bins=10,min=this.min(key),max=this.max(key)){const binSize=(max-min)/bins;const aa=new AgentArray(bins);aa.fill(0);this.ask(a=>{const val=key?a[key]:a;if(val<min||val>max){util.warn(`histogram bounds error: ${val}: ${min}-${max}`)}else{let bin=Math.floor((val-min)/binSize);if(bin===bins)bin--;aa[bin]++}});aa.parameters={key:key,bins:bins,min:min,max:max,binSize:binSize,arraySize:this.length};return aa}clone(begin=0,end=this.length){return this.slice(begin,end)}shuffle(){return util.shuffle(this)}sortBy(reporter,ascending=true){util.sortObjs(this,reporter,ascending);return this}remove(o,f){const i=this.agentIndex(o,f);if(i!==-1)this.splice(i,1);else util.warn(`remove: ${o} not in AgentArray`);return this}insert(o,f){const i=this.sortedIndex(o,f);if(this[i]===o)throw Error("insert: item already in AgentArray");this.splice(i,0,o)}sortedIndex(item,f=util.identity){if(util.isString(f))f=util.propFcn(f);const value=f(item);let low=0;let high=this.length;while(low<high){const mid=low+high>>>1;if(f(this[mid])<value){low=mid+1}else{high=mid}}return low}agentIndex(item,property){if(!property)return this.indexOf(item);const i=this.sortedIndex(item,property);return this[i]===item?i:-1}contains(item,f){return this.agentIndex(item,f)>=0}oneOf(){return util.oneOf(this)}otherOneOf(agent){return util.otherOneOf(this,agent)}otherNOf(n,item){if(this.length<n)throw Error("AgentArray: otherNOf: length < N");return this.clone().remove(item).shuffle().slice(0,n)}minOrMaxOf(min,reporter,valueToo=false){if(this.isEmpty())throw Error("min/max OneOf: empty array");if(typeof reporter==="string")reporter=util.propFcn(reporter);let o=null;let val=min?Infinity:-Infinity;for(let i=0;i<this.length;i++){const a=this[i];const aval=reporter(a);if(min&&aval<val||!min&&aval>val){[o,val]=[a,aval]}}return valueToo?[o,val]:o}minOneOf(reporter){return this.minOrMaxOf(true,reporter)}maxOneOf(reporter){return this.minOrMaxOf(false,reporter)}minValOf(reporter){return this.minOrMaxOf(true,reporter,true)}maxValOf(reporter){return this.minOrMaxOf(false,reporter,true)}nOf(n){if(n>this.length)throw Error("nOf: n larger than AgentArray");if(n===this.length)return this;const result=new AgentArray;while(result.length<n){const o=this.oneOf();if(!(o in result))result.push(o)}return result}minOrMaxNOf(min,n,reporter){if(n>this.length){throw Error("min/max nOf: n larger than AgentArray")}const as=this.clone().sortBy(reporter);return min?as.clone(0,n):as.clone(as.length-n)}minNOf(n,reporter){return this.minOrMaxNOf(true,n,reporter)}maxNOf(n,reporter){return this.minOrMaxNOf(false,n,reporter)}inRect(o,dx,dy=dx,meToo=false){const agents=new AgentArray;const minX=o.x-dx;const maxX=o.x+dx;const minY=o.y-dy;const maxY=o.y+dy;this.ask(a=>{if(minX<=a.x&&a.x<=maxX&&minY<=a.y&&a.y<=maxY){if(meToo||o!==a)agents.push(a)}});return agents}inRadius(o,radius,meToo=false){const agents=new AgentArray;const d2=radius*radius;const sqDistance=util.sqDistance;this.ask(a=>{if(sqDistance(o.x,o.y,a.x,a.y)<=d2){if(meToo||o!==a)agents.push(a)}});return agents}inCone(o,radius,coneAngle,direction,meToo=false){const agents=new AgentArray;this.ask(a=>{if(util.inCone(a.x,a.y,radius,coneAngle,direction,o.x,o.y)){if(meToo||o!==a)agents.push(a)}});return agents}}class AgentSet extends AgentArray{static get[Symbol.species](){return AgentArray}constructor(model,AgentClass,name,baseSet=null){super();baseSet=baseSet||this;Object.assign(this,{model:model,name:name,baseSet:baseSet,AgentClass:AgentClass});if(this.isBaseSet()){this.breeds={};this.ID=0}else{Object.setPrototypeOf(this,Object.getPrototypeOf(baseSet));this.baseSet.breeds[name]=this}this.ownVariables=[];this.agentProto=new AgentClass(this);this.protoMixin(this.agentProto,AgentClass)}protoMixin(agentProto,AgentClass){Object.assign(agentProto,{agentSet:this,model:this.model});agentProto[this.baseSet.name]=this.baseSet;if(!AgentClass.prototype.setBreed){Object.assign(AgentClass.prototype,{setBreed(breed){breed.setBreed(this)},getBreed(){return this.agentSet},isBreed(breed){return this.agentSet===breed}});Object.defineProperty(AgentClass.prototype,"breed",{get:function(){return this.agentSet}})}}newBreed(name){return new AgentSet(this.model,this.AgentClass,name,this)}isBreedSet(){return this.baseSet!==this}isBaseSet(){return this.baseSet===this}withBreed(breed){return this.filter(a=>a.agentSet===breed)}create(){console.log(`AgentSet: Abstract method called: ${this}`)}addAgent(o){o=o||Object.create(this.agentProto);if(this.isBreedSet())this.baseSet.addAgent(o);else o.id=this.ID++;this.push(o);return o}clear(){while(!this.isEmpty())this.last().die()}removeAgent(o){if(this.isBreedSet())this.baseSet.remove(o,"id");this.remove(o,"id");return this}setDefault(name,value){this.agentProto[name]=value;return this}getDefault(name){return this.agentProto[name]}settingDefault(agent){return agent.id==null}own(varnames){for(const name of varnames.split(" ")){this.setDefault(name,null);this.ownVariables.push(name)}}setBreed(a){if(a.agentSet===this)return;if(a.agentSet.isBreedSet())a.agentSet.remove(a,"id");if(this.isBreedSet())this.insert(a,"id");const avars=a.agentSet.ownVariables;for(const avar of avars){if(!this.ownVariables.includes(avar))delete a[avar]}for(const ownvar of this.ownVariables){if(!avars.includes(ownvar))a[ownvar]=0}return Object.setPrototypeOf(a,this.agentProto)}ask(fcn){if(this.length===0)return;const lastID=this.last().id;for(let i=0;i<this.length&&this[i].id<=lastID;i++){fcn(this[i],i,this)}}askSet(fcn){if(this.length===0)return;if(this.name==="patches")super.ask(fcn);if(this.isBaseSet())this.baseSetAsk(fcn);if(this.isBreedSet())this.cloneAsk(fcn)}baseSetAsk(fcn){if(this.length===0)return;const lastID=this.last().id;for(let i=0;i<this.length&&this[i].id<=lastID;i++){const id=this[i].id;fcn(this[i],i,this);while(i<this.length&&i>=0&&this[i].id>id){i--}}}cloneAsk(fcn){const clone=this.clone();for(let i=0;i<clone.length;i++){const obj=clone[i];if(obj.breed==this&&obj.id>0){fcn(obj,i,clone)}}}}class DataSet{static emptyDataSet(width,height,Type){return new DataSet(width,height,new Type(width*height))}constructor(width,height,data){if(data.length!==width*height){throw Error(`new DataSet length: ${data.length} !== ${width} * ${height}`)}Object.assign(this,{width:width,height:height,data:data})}setName(string){this.name=string;return this}getName(){return this.name?this.name:this.makeName()}makeName(){const{width:width,height:height}=this;const sum=util.arraySum(this.data).toFixed(2);return`${this.dataType().name}-${width}-${height}-${sum}`}checkXY(x,y){if(!this.inBounds(x,y)){throw Error(`DataSet: x,y out of range: ${x}, ${y}`)}}inBounds(x,y){return util.between(x,0,this.width-1)&&util.between(y,0,this.height-1)}dataType(){return this.data.constructor}type(){return this.constructor}toIndex(x,y){return x+y*this.width}toXY(i){return[i%this.width,Math.floor(i/this.width)]}getXY(x,y){return this.data[this.toIndex(x,y)]}setXY(x,y,num){this.data[this.toIndex(x,y)]=num}sample(x,y,useNearest=true){this.checkXY(x,y);return useNearest?this.nearest(x,y):this.bilinear(x,y)}nearest(x,y){return this.getXY(Math.round(x),Math.round(y))}bilinear(x,y){const x0=Math.floor(x);const y0=Math.floor(y);const i=this.toIndex(x0,y0);const w=this.width;const dx=x-x0;const dy=y-y0;const dx1=1-dx;const dy1=1-dy;const f00=this.data[i];const f10=this.data[i+1]||0;const f01=this.data[i+w]||0;const f11=this.data[i+1+w]||0;return f00*dx1*dy1+f10*dx*dy1+f01*dx1*dy+f11*dx*dy}copy(){return new DataSet(this.width,this.height,util.clone(this.data))}emptyDataSet(width,height,type=this.dataType()){return DataSet.emptyDataSet(width,height,type)}emptyArray(length){const Type=this.type();return new Type(length)}resample(width,height,useNearest=true,Type=Array){if(width===this.width&&height===this.height)return this.copy();const ds=DataSet.emptyDataSet(width,height,Type);const xScale=(this.width-1)/(width-1);const yScale=(this.height-1)/(height-1);for(let y=0;y<height;y++){for(let x=0;x<width;x++){ds.setXY(x,y,this.sample(x*xScale,y*yScale,useNearest))}}return ds}scale(min,max){const dsMin=this.min();const dsMax=this.max();const dsDelta=dsMax-dsMin;const delta=max-min;const m=delta/dsDelta;const b=min-m*dsMin;return this.map(x=>m*x+b)}subset(x,y,width,height){if(x+width>this.width||y+height>this.height){throw Error("DataSet.subSet: params out of range")}const ds=this.emptyDataSet(width,height);for(let i=0;i<width;i++){for(let j=0;j<height;j++){ds.setXY(i,j,this.getXY(i+x,j+y))}}return ds}map(f){return new DataSet(this.width,this.height,this.data.map(f))}col(x){const[w,h,data]=[this.width,this.height,this.data];if(x>=w)throw Error(`col: x out of range width: ${w} x: ${x}`);const colData=this.emptyArray(h);for(let i=0;i<h;i++)colData[i]=data[x+i*w];return colData}row(y){const[w,h]=[this.width,this.height];if(y>=h)throw Error(`row: y out of range height: ${h} x: ${y}`);return this.data.slice(y*w,(y+1)*w)}convertType(type){this.data=util.convertArray(this.data,type)}concatEast(ds){const[w,h]=[this.width,this.height];const[w1,h1]=[ds.width,ds.height];if(h!==h1)throw Error(`concatEast: heights not equal ${h}, ${h1}`);const ds1=this.emptyDataSet(w+w1,h);for(let x=0;x<h;x++){for(let y=0;y<w;y++){ds1.setXY(x,y,this.getXY(x,y))}}for(let x=0;x<h1;x++){for(let y=0;y<w1;y++){ds1.setXY(x+w,y,ds.getXY(x,y))}}return ds1}concatSouth(dataset){const[w,h,data]=[this.width,this.height,this.data];if(w!==dataset.width){throw Error(`concatSouth: widths not equal ${w}, ${dataset.width}`)}const data1=util.concatArrays(data,dataset.data);return new DataSet(w,h+dataset.height,data1)}transformCoords(x,y,tlx,tly,w,h){const xs=(x-tlx)*(this.width-1)/w;const ys=(tly-y)*(this.height-1)/h;return[xs,ys]}coordSample(x,y,tlx,tly,w,h,useNearest=true){const[xs,ys]=this.transformCoords(x,y,tlx,tly,w,h);return this.sample(xs,ys,useNearest)}neighborhood(x,y,array=[]){array.length=0;const clampNeeded=x===0||x===this.width-1||y===0||y===this.height-1;for(let dy=-1;dy<=+1;dy++){for(let dx=-1;dx<=+1;dx++){let x0=x+dx;let y0=y+dy;if(clampNeeded){x0=util.clamp(x0,0,this.width-1);y0=util.clamp(y0,0,this.height-1)}array.push(this.data[this.toIndex(x0,y0)])}}return array}convolve(kernel,factor=1,crop=false){const[x0,y0,h,w]=crop?[1,1,this.height-1,this.width-1]:[0,0,this.height,this.width];const newDS=this.emptyDataSet(w,h);const newData=newDS.data;let i=0;for(let y=y0;y<h;y++){for(let x=x0;x<w;x++){const nei=this.neighborhood(x,y);let sum2=0;for(let i2=0;i2<kernel.length;i2++){sum2=sum2+kernel[i2]*nei[i2]}newData[i++]=sum2*factor}}return newDS}dzdx(n=2,factor=1/8){return this.convolve([-1,0,1,-n,0,n,-1,0,1],factor)}dzdy(n=2,factor=1/8){return this.convolve([1,n,1,0,0,0,-1,-n,-1],factor)}laplace8(){return this.convolve([-1,-1,-1,-1,8,-1,-1,-1,-1])}laplace4(){return this.convolve([0,-1,0,-1,4,-1,0,-1,0])}blur(factor=.0625){return this.convolve([1,2,1,2,4,2,1,2,1],factor)}edge(){return this.convolve([1,1,1,1,-7,1,1,1,1])}slopeAndAspect(cellSize=1,posAngle=true){const dzdx=this.dzdx();const dzdy=this.dzdy();let[aspect,slope]=[[],[]];const[h,w]=[dzdx.height,dzdx.width];for(let y=0;y<h;y++){for(let x=0;x<w;x++){const[gx,gy]=[dzdx.getXY(x,y),dzdy.getXY(x,y)];slope.push(Math.atan(util.distance(0,0,gx,gy))/cellSize);let rad=Math.atan2(-gy,-gx);if(posAngle&&rad<0)rad+=2*Math.PI;aspect.push(rad)}}slope=new DataSet(w,h,slope);aspect=new DataSet(w,h,aspect);return{slope:slope,aspect:aspect,dzdx:dzdx,dzdy:dzdy}}max(){return util.arrayMax(this.data)}min(){return util.arrayMin(this.data)}equals(dataset){return this.width===dataset.width&&this.height===dataset.height&&util.arraysEqual(this.data,dataset.data)}}class Link{static defaultVariables(){return{end0:null,end1:null,width:1}}constructor(){Object.assign(this,Link.defaultVariables())}init(from,to){this.end0=from;this.end1=to;from.links.push(this);to.links.push(this)}die(){this.agentSet.removeAgent(this);util.removeArrayItem(this.end0.links,this);util.removeArrayItem(this.end1.links,this);this.id=-1}bothEnds(){return[this.end0,this.end1]}length(){return this.end0.distance(this.end1)}otherEnd(turtle){if(turtle===this.end0)return this.end1;if(turtle===this.end1)return this.end0;throw Error(`Link.otherEnd: turtle not a link turtle: ${turtle}`)}get x0(){return this.end0.x}get y0(){return this.end0.y}get x1(){return this.end1.x}get y1(){return this.end1.y}}class Links extends AgentSet{create(from,to,initFcn=(link=>{})){if(!Array.isArray(to))to=[to];return to.map(t=>{const link=this.addAgent();link.init(from,t);initFcn(link);return link})}}class World{static defaultOptions(maxX=16,maxY=maxX){return{minX:-maxX,maxX:maxX,minY:-maxY,maxY:maxY}}constructor(options={}){Object.assign(this,World.defaultOptions());Object.assign(this,options);this.setWorld()}setWorld(){this.numX=this.maxX-this.minX+1;this.numY=this.maxY-this.minY+1;this.minXcor=this.minX-.5;this.maxXcor=this.maxX+.5;this.minYcor=this.minY-.5;this.maxYcor=this.maxY+.5}isOnWorld(x,y){return this.minXcor<=x&&x<=this.maxXcor&&this.minYcor<=y&&y<=this.maxYcor}setCtxTransform(ctx,patchSize){ctx.canvas.width=this.numX*patchSize;ctx.canvas.height=this.numY*patchSize;ctx.restore();ctx.save();ctx.scale(patchSize,-patchSize);ctx.translate(-this.minXcor,-this.maxYcor)}pixelXYtoPatchXY(x,y,patchSize=1){return[this.minXcor+x/patchSize,this.maxYcor-y/patchSize]}patchXYtoPixelXY(x,y,patchSize=1){return[(x-this.minXcor)*patchSize,(this.maxYcor-y)*patchSize]}}class Patches extends AgentSet{constructor(model,AgentClass,name){super(model,AgentClass,name);if(this.isBreedSet())return;this.populate();this.labels=[]}populate(){util.repeat(this.model.world.numX*this.model.world.numY,i=>{this.addAgent()})}setDefault(name,value){if(name==="color"){this.ask(p=>{p.setColor(value)});util.logOnce("patches.setDefault(color, value): color default not supported. Clearing to value")}else{super.setDefault(name,value)}}setLabel(patch,label){if(label==null){delete this.labels[patch.id]}else{this.labels[patch.id]=label}}getLabel(patch){return this.labels[patch.id]}neighborsOffsets(x,y){const{minX:minX,maxX:maxX,minY:minY,maxY:maxY,numX:numX}=this.model.world;if(x===minX){if(y===minY)return[-numX,-numX+1,1];if(y===maxY)return[1,numX+1,numX];return[-numX,-numX+1,1,numX+1,numX]}if(x===maxX){if(y===minY)return[-numX-1,-numX,-1];if(y===maxY)return[numX,numX-1,-1];return[-numX-1,-numX,numX,numX-1,-1]}if(y===minY)return[-numX-1,-numX,-numX+1,1,-1];if(y===maxY)return[1,numX+1,numX,numX-1,-1];return[-numX-1,-numX,-numX+1,1,numX+1,numX,numX-1,-1]}neighbors4Offsets(x,y){const numX=this.model.world.numX;return this.neighborsOffsets(x,y).filter(n=>Math.abs(n)===1||Math.abs(n)===numX)}neighbors(patch){const{id:id,x:x,y:y}=patch;const offsets=this.neighborsOffsets(x,y);const as=new AgentArray(offsets.length);offsets.forEach((o,i)=>{as[i]=this[o+id]});return as}neighbors4(patch){const{id:id,x:x,y:y}=patch;const offsets=this.neighbors4Offsets(x,y);const as=new AgentArray(offsets.length);offsets.forEach((o,i)=>{as[i]=this[o+id]});return as}randomPt(){const{minX:minX,maxX:maxX,minY:minY,maxY:maxY}=this.model.world;return[util.randomInt2(minX,maxX),util.randomInt2(minY,maxY)]}importDataSet(dataSet,patchVar,useNearest=false){if(this.isBreedSet()){util.warn("Patches: exportDataSet called with breed, using patches");this.baseSet.importDataSet(dataSet,patchVar,useNearest);return}const{numX:numX,numY:numY}=this.model.world;const dataset=dataSet.resample(numX,numY,useNearest);this.ask(p=>{p[patchVar]=dataset.data[p.id]})}exportDataSet(patchVar,Type=Array){if(this.isBreedSet()){util.warn("Patches: exportDataSet called with breed, using patches");return this.baseSet.exportDataSet(patchVar,Type)}const{numX:numX,numY:numY}=this.model.world;let data=this.props(patchVar);data=util.convertArray(data,Type);return new DataSet(numX,numY,data)}patchIndex(x,y){const{minX:minX,maxY:maxY,numX:numX}=this.model.world;return x-minX+numX*(maxY-y)}patch(x,y){if(!this.model.world.isOnWorld(x,y))return undefined;const intX=x===this.model.world.maxXcor?this.model.world.maxX:Math.round(x);const intY=y===this.model.world.maxYcor?this.model.world.maxY:Math.round(y);return this.patchXY(intX,intY)}patchXY(x,y){return this[this.patchIndex(x,y)]}patchRect(p,dx,dy=dx,meToo=true){if(p.rectCache){const index=this.cacheIndex(dx,dy,meToo);const rect=p.rectCache[index];if(rect)return rect}const rect=new AgentArray;let{minX:minX,maxX:maxX,minY:minY,maxY:maxY}=this.model.world;minX=Math.max(minX,p.x-dx);maxX=Math.min(maxX,p.x+dx);minY=Math.max(minY,p.y-dy);maxY=Math.min(maxY,p.y+dy);for(let y=minY;y<=maxY;y++){for(let x=minX;x<=maxX;x++){const pnext=this.patchXY(x,y);if(p!==pnext||meToo)rect.push(pnext)}}return rect}patchRectXY(x,y,dx,dy=dx,meToo=true){return this.patchRect(this.patch(x,y),dx,dy,meToo)}cacheIndex(dx,dy=dx,meToo=true){return(2*dx+1)*(2*dy+1)+(meToo?0:-1)}cacheRect(dx,dy=dx,meToo=true,clear=true){const index=this.cacheIndex(dx,dy,meToo);this.ask(p=>{if(!p.rectCache||clear)p.rectCache=[];const rect=this.inRect(p,dx,dy,meToo);p.rectCache[index]=rect})}inRect(patch,dx,dy=dx,meToo=true){const pRect=this.patchRect(patch,dx,dy,meToo);if(this.isBaseSet())return pRect;return pRect.withBreed(this)}inRadius(patch,radius,meToo=true){const dxy=Math.ceil(radius);const pRect=this.inRect(patch,dxy,dxy,meToo);return pRect.inRadius(patch,radius,meToo)}inCone(patch,radius,coneAngle,direction,meToo=true){const dxy=Math.ceil(radius);const pRect=this.inRect(patch,dxy,dxy,meToo);return pRect.inCone(patch,radius,coneAngle,direction,meToo)}patchAtAngleAndDistance(obj,angle,distance){let{x:x,y:y}=obj;x=x+distance*Math.cos(angle);y=y+distance*Math.sin(angle);return this.patch(x,y)}isOnEdge(patch){const{x:x,y:y}=patch;const{minX:minX,maxX:maxX,minY:minY,maxY:maxY}=this.model.world;return x===minX||x===maxX||y===minY||y===maxY}edgePatches(){return this.filter(p=>this.isOnEdge(p))}diffuse(v,rate){this.diffuseN(8,v,rate)}diffuse4(v,rate){this.diffuseN(4,v,rate)}diffuseN(n,v,rate){if(this[0]._diffuseNext===undefined){for(let i=0;i<this.length;i++)this[i]._diffuseNext=0}for(let i=0;i<this.length;i++){const p=this[i];const dv=p[v]*rate;const dvn=dv/n;const neighbors=n===8?p.neighbors:p.neighbors4;const nn=neighbors.length;p._diffuseNext+=p[v]-dv+(n-nn)*dvn;for(let i=0;i<neighbors.length;i++){neighbors[i]._diffuseNext+=dvn}}for(let i=0;i<this.length;i++){const p=this[i];p[v]=p._diffuseNext;p._diffuseNext=0}}}class Patch{static defaultVariables(){return{turtles:undefined}}constructor(){Object.assign(this,Patch.defaultVariables())}get x(){return this.id%this.model.world.numX+this.model.world.minX}get y(){return this.model.world.maxY-Math.floor(this.id/this.model.world.numX)}isOnEdge(){return this.patches.isOnEdge(this)}get neighbors(){const n=this.patches.neighbors(this);Object.defineProperty(this,"neighbors",{value:n,enumerable:true});return n}get neighbors4(){const n=this.patches.neighbors4(this);Object.defineProperty(this,"neighbors4",{value:n,enumerable:true});return n}turtlesHere(){if(this.turtles==null){this.patches.ask(p=>{p.turtles=[]});this.model.turtles.ask(t=>{t.patch.turtles.push(t)})}return this.turtles}breedsHere(breed){const turtles=this.turtlesHere();return turtles.withBreed(breed)}distanceXY(x,y){return util.distance(this.x,this.y,x,y)}distance(agent){return this.distanceXY(agent.x,agent.y)}towards(agent){return this.towardsXY(agent.x,agent.y)}towardsXY(x,y){return util.radiansToward(this.x,this.y,x,y)}patchAt(dx,dy){return this.patches.patch(this.x+dx,this.y+dy)}patchAtAngleAndDistance(direction,distance){return this.patches.patchAtAngleAndDistance(this,direction,distance)}sprout(num=1,breed=this.model.turtles,initFcn=(turtle=>{})){return breed.create(num,turtle=>{turtle.setxy(this.x,this.y);initFcn(turtle)})}}class Turtles extends AgentSet{create(num=1,initFcn=(turtle=>{})){return util.repeat(num,(i,a)=>{const turtle=this.addAgent();turtle.theta=util.randomFloat(Math.PI*2);initFcn(turtle);a.push(turtle)})}randomPt(){const{minXcor:minXcor,maxXcor:maxXcor,minYcor:minYcor,maxYcor:maxYcor}=this.model.world;return[util.randomFloat2(minXcor,maxXcor),util.randomFloat2(minYcor,maxYcor)]}inPatches(patches){let array=new AgentArray;for(const p of patches)array.push(...p.turtlesHere());if(this.isBreedSet())array=array.filter(a=>a.agentSet===this);return array}inPatchRect(turtle,dx,dy=dx,meToo=false){const patches=this.model.patches.inRect(turtle.patch,dx,dy,true);const agents=this.inPatches(patches);if(!meToo)util.removeArrayItem(agents,turtle);return agents}inRadius(turtle,radius,meToo=false){const agents=this.inPatchRect(turtle,radius,radius,true);return agents.inRadius(turtle,radius,meToo)}inCone(turtle,radius,coneAngle,meToo=false){const agents=this.inPatchRect(turtle,radius,radius,true);return agents.inCone(turtle,radius,coneAngle,turtle.theta,meToo)}layoutCircle(radius,center=[0,0],startAngle=Math.PI/2,direction=-1){const dTheta=2*Math.PI/this.length;const[x0,y0]=center;this.ask((turtle,i)=>{turtle.setxy(x0,y0);turtle.theta=startAngle+direction*dTheta*i;turtle.forward(radius)})}}class Turtle{static defaultVariables(){return{x:0,y:0,z:0,theta:0,atEdge:"clamp"}}constructor(){Object.assign(this,Turtle.defaultVariables())}die(){this.agentSet.removeAgent(this);if(this.hasOwnProperty("links")){while(this.links.length>0)this.links[0].die()}if(this.patch.turtles!=null){util.removeArrayItem(this.patch.turtles,this)}this.id=-1}hatch(num=1,breed=this.agentSet,init=(turtle=>{})){return breed.create(num,turtle=>{turtle.setxy(this.x,this.y);for(const key of breed.ownVariables){if(turtle[key]==null)turtle[key]=this[key]}init(turtle)})}get links(){Object.defineProperty(this,"links",{value:new AgentArray(0),enumerable:true});return this.links}get patch(){return this.model.patches.patch(this.x,this.y)}get heading(){return util.heading(this.theta)}set heading(heading){this.theta=util.angle(heading)}get direction(){return this.theta}set direction(theta){this.theta=theta}setxy(x,y,z=null){const p0=this.patch;if(z!=null)this.z=z;if(this.model.world.isOnWorld(x,y)){this.x=x;this.y=y}else{this.handleEdge(x,y)}const p=this.patch;if(p.turtles!=null&&p!==p0){util.removeArrayItem(p0.turtles,this);p.turtles.push(this)}}handleEdge(x,y){if(util.isString(this.atEdge)){const{minXcor:minXcor,maxXcor:maxXcor,minYcor:minYcor,maxYcor:maxYcor}=this.model.world;if(this.atEdge==="wrap"){this.x=util.wrap(x,minXcor,maxXcor);this.y=util.wrap(y,minYcor,maxYcor)}else if(this.atEdge==="clamp"||this.atEdge==="bounce"){this.x=util.clamp(x,minXcor,maxXcor);this.y=util.clamp(y,minYcor,maxYcor);if(this.atEdge==="bounce"){if(this.x===minXcor||this.x===maxXcor){this.theta=Math.PI-this.theta}else{this.theta=-this.theta}}}else{throw Error(`turtle.handleEdge: bad atEdge: ${this.atEdge}`)}}else{this.atEdge(this)}}moveTo(agent){this.setxy(agent.x,agent.y)}forward(d){this.setxy(this.x+d*Math.cos(this.theta),this.y+d*Math.sin(this.theta))}rotate(rad){this.theta=util.mod(this.theta+rad,Math.PI*2)}right(rad){this.rotate(-rad)}left(rad){this.rotate(rad)}face(agent){this.theta=this.towards(agent)}faceXY(x,y){this.theta=this.towardsXY(x,y)}patchAhead(distance){return this.patchAtAngleAndDistance(this.theta,distance)}canMove(distance){return this.patchAhead(distance)!=null}patchLeftAndAhead(angle,distance){return this.patchAtAngleAndDistance(angle+this.theta,distance)}patchRightAndAhead(angle,distance){return this.patchAtAngleAndDistance(angle-this.theta,distance)}distanceXY(x,y){return util.distance(this.x,this.y,x,y)}distance(agent){return util.distance(this.x,this.y,agent.x,agent.y)}towards(agent){return this.towardsXY(agent.x,agent.y)}towardsXY(x,y){return util.radiansToward(this.x,this.y,x,y)}patchAt(dx,dy){return this.model.patches.patch(this.x+dx,this.y+dy)}patchAtAngleAndDistance(direction,distance){return this.model.patches.patchAtAngleAndDistance(this,direction,distance)}otherEnd(l){return l.end0===this?l.end1:l.end0}linkNeighbors(){return this.links.map(l=>this.otherEnd(l))}}class Model{static defaultWorld(maxX=16,maxY=maxX){return World.defaultOptions(maxX,maxY)}constructor(worldOptions=Model.defaultWorld()){this.worldOptions=worldOptions;this.resetModel()}initAgentSet(name,AgentsetClass,AgentClass){const agentset=new AgentsetClass(this,AgentClass,name);this[name]=agentset}resetModel(){this.ticks=0;this.world=new World(this.worldOptions);this.initAgentSet("patches",Patches,Patch);this.initAgentSet("turtles",Turtles,Turtle);this.initAgentSet("links",Links,Link)}reset(){this.resetModel()}tick(){this.ticks++}setup(){}step(){}patchBreeds(breedNames){for(const breedName of breedNames.split(" ")){this[breedName]=this.patches.newBreed(breedName)}}turtleBreeds(breedNames){for(const breedName of breedNames.split(" ")){this[breedName]=this.turtles.newBreed(breedName)}}linkBreeds(breedNames){for(const breedName of breedNames.split(" ")){this[breedName]=this.links.newBreed(breedName)}}}class RGBDataSet extends DataSet{static scaleFromMinMax(min,max){return(max-min)/(2**24-1)}constructor(img,min=0,scale=1,ArrayType=Float32Array){super(img.width,img.height,new ArrayType(img.width*img.height));const ctx=util.createCtx(img.width,img.height);util.fillCtxWithImage(ctx,img);const imgData=util.ctxImageData(ctx);const convertedData=this.data;for(var i=0;i<convertedData.length;i++){const r=imgData.data[4*i];const g=imgData.data[4*i+1];const b=imgData.data[4*i+2];convertedData[i]=min+(r*256*256+g*256+b)*scale}}}function toJSON(obj,indent=0,topLevelArrayOK=true){let firstCall=topLevelArrayOK;const blackList=["rectCache"];const json=JSON.stringify(obj,(key,val)=>{if(blackList.includes(key))return undefined;const isAgentArray=Array.isArray(val)&&val.length>0&&Number.isInteger(val[0].id);if(isAgentArray&&!firstCall){return val.map(v=>v.id)}firstCall=false;return val},indent);return json}function sampleObj(model){const obj={model:Object.keys(model),patches:model.patches.length,patch:model.patches.oneOf(),turtles:model.turtles.length,turtle:model.turtles.oneOf(),links:model.links.length,link:model.links.oneOf()};const json=toJSON(obj);return JSON.parse(json)}function sampleJSON(model,indent=0){return toJSON(sampleObj(model),indent)}function printToPage(msg,element=document.body){if(util.isObject(msg)){msg=JSON.stringify(msg,null,2);msg="<pre>"+msg+"</pre>"}element.style.fontFamily="monospace";element.innerHTML+=msg+"<br />"}var modelIO=Object.freeze({toJSON:toJSON,sampleObj:sampleObj,sampleJSON:sampleJSON,printToPage:printToPage});exports.AgentArray=AgentArray;exports.AgentSet=AgentSet;exports.DataSet=DataSet;exports.Link=Link;exports.Links=Links;exports.Model=Model;exports.Patch=Patch;exports.Patches=Patches;exports.RGBDataSet=RGBDataSet;exports.Turtle=Turtle;exports.Turtles=Turtles;exports.World=World;exports.modelIO=modelIO;exports.util=util;Object.defineProperty(exports,"__esModule",{value:true})});
