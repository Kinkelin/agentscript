#!/usr/bin/env node

// /* eslint-disable */
// import test from 'ava'
const puppeteer = require('puppeteer')
const shell = require('shelljs')

const path = process.argv[2]
console.log(path)
if (!path) throw Error('Needs path name argument')

const [dir, model] = path.split('/')
console.log('path:', path, 'dir:', dir, 'model:', model)
if (!dir || !model) throw Error('Needs dir/model argument')

const url = `http://127.0.0.1:8080/${dir}/?${model}`
console.log('url:', url)

const child = shell.exec('live-server --no-browser --quiet --watch=src', {
    async: true,
})

function wait(seconds = 1) {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve(), seconds * 1000)
    })
}

// window/viewport size: https://github.com/GoogleChrome/puppeteer/issues/1183
const [width, height] = [500, 600]

async function run() {
    const browser = await puppeteer.launch({
        args: ['--user-agent=Puppeteer', `--window-size=${width},${height}`],
        headless: false,
        // devtools: true,
    })
    // console.log('browser')
    const page = await browser.newPage()
    await page.setViewport({ width, height })

    // console.log('page')
    await page.goto(url)
    console.log('waiting 4 seconds') // works! lets model run n seconds
    await wait(4)
    console.log('done waiting')

    // await page.screenshot({ path: `test/${model}.png` })
    await browser.close()

    child.kill()
}
run()
